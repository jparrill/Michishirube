openapi: 3.0.3
info:
  title: Michishirube API
  description: Personal task organization tool for developers
  version: 1.0.0
  contact:
    name: Michishirube
  license:
    name: MIT

servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /tasks:
    get:
      summary: List tasks
      description: Retrieve a list of tasks with optional filtering
      parameters:
        - name: status
          in: query
          description: Filter by status (comma-separated)
          required: false
          schema:
            type: string
            example: "new,in_progress"
        - name: priority
          in: query
          description: Filter by priority (comma-separated)
          required: false
          schema:
            type: string
            example: "high,critical"
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
            example: "k8s,memory"
        - name: include_archived
          in: query
          description: Include archived tasks
          required: false
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
        - name: offset
          in: query
          description: Number of results to skip
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new task
      description: Create a new task with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      summary: Get task by ID
      description: Retrieve a specific task with its links and comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWithDetails'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update task
      description: Update a task with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete task
      description: Delete a task and all associated links and comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Partially update task
      description: Partially update a task (status, priority, tags, blockers, etc.)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /links:
    post:
      summary: Create a new link
      description: Create a new link for a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkRequest'
      responses:
        '201':
          description: Link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /links/{id}:
    put:
      summary: Update link
      description: Update an existing link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLinkRequest'
      responses:
        '200':
          description: Link updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete link
      description: Delete a link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Link deleted successfully
        '404':
          description: Link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /comments:
    post:
      summary: Create a new comment
      description: Create a new comment for a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /comments/{id}:
    delete:
      summary: Delete comment
      description: Delete a comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment deleted successfully
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /report:
    get:
      summary: Generate automatic status report
      description: Generate a categorized report of tasks
      responses:
        '200':
          description: Status report with categorized tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '500':
          description: Failed to generate report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Task:
      type: object
      required:
        - id
        - jira_id
        - title
        - priority
        - status
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        jira_id:
          type: string
          example: "OCPBUGS-1234"
          description: Jira ticket ID or "NO-JIRA"
        title:
          type: string
          example: "Fix memory leak in pod controller"
        priority:
          $ref: '#/components/schemas/Priority'
        status:
          $ref: '#/components/schemas/Status'
        tags:
          type: array
          items:
            type: string
          example: ["k8s", "memory"]
        blockers:
          type: array
          items:
            type: string
          example: ["Waiting for review from @team-lead"]
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T14:20:00Z"

    TaskWithDetails:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

    Link:
      type: object
      required:
        - id
        - task_id
        - type
        - url
      properties:
        id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/LinkType'
        url:
          type: string
          format: uri
          example: "https://github.com/org/repo/pull/456"
        title:
          type: string
          example: "Fix memory leak"
        status:
          type: string
          example: "merged"
        metadata:
          type: string
          description: JSON string with type-specific data
          example: '{"pr_number": 456, "author": "user123"}'

    Comment:
      type: object
      required:
        - id
        - task_id
        - content
        - created_at
      properties:
        id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        content:
          type: string
          example: "Found the root cause in the controller reconcile loop"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"

    Priority:
      type: string
      enum: [minor, normal, high, critical]
      example: "high"

    Status:
      type: string
      enum: [new, in_progress, blocked, done, archived]
      example: "in_progress"

    LinkType:
      type: string
      enum: [pull_request, slack_thread, jira_ticket, documentation, other]
      example: "pull_request"

    CreateTaskRequest:
      type: object
      required:
        - jira_id
        - title
        - priority
      properties:
        jira_id:
          type: string
          example: "OCPBUGS-5678"
        title:
          type: string
          example: "Implement new feature"
        priority:
          $ref: '#/components/schemas/Priority'
        tags:
          type: array
          items:
            type: string
          example: ["feature", "api"]
        blockers:
          type: array
          items:
            type: string
          example: []

    UpdateTaskRequest:
      type: object
      required:
        - jira_id
        - title
        - priority
        - status
      properties:
        jira_id:
          type: string
        title:
          type: string
        priority:
          $ref: '#/components/schemas/Priority'
        status:
          $ref: '#/components/schemas/Status'
        tags:
          type: array
          items:
            type: string
        blockers:
          type: array
          items:
            type: string


    CreateLinkRequest:
      type: object
      required:
        - task_id
        - type
        - url
      properties:
        task_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        type:
          $ref: '#/components/schemas/LinkType'
        url:
          type: string
          format: uri
        title:
          type: string
        status:
          type: string
        metadata:
          type: string
          description: JSON string with type-specific data

    UpdateLinkRequest:
      type: object
      required:
        - type
        - url
      properties:
        type:
          $ref: '#/components/schemas/LinkType'
        url:
          type: string
          format: uri
        title:
          type: string
        status:
          type: string
        metadata:
          type: string

    CreateCommentRequest:
      type: object
      required:
        - task_id
        - content
      properties:
        task_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        content:
          type: string
          example: "Found the root cause in the controller reconcile loop"

    TaskListResponse:
      type: object
      required:
        - tasks
        - total
        - limit
        - offset
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        total:
          type: integer
          example: 42
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0

    LinkListResponse:
      type: object
      required:
        - links
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    CommentListResponse:
      type: object
      required:
        - comments
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    PatchTaskRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        priority:
          $ref: '#/components/schemas/Priority'
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        blockers:
          type: array
          items:
            type: string

    CommentResponse:
      type: object
      required:
        - id
        - message
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: "Comment created successfully"

    ReportResponse:
      type: object
      required:
        - working_on
        - next_up
        - blockers
      properties:
        working_on:
          type: array
          items:
            $ref: '#/components/schemas/TaskWithDetails'
          description: "Tasks that are in progress or completed"
        next_up:
          type: array
          items:
            $ref: '#/components/schemas/TaskWithDetails'
          description: "Tasks that are new or in progress, ordered by priority"
        blockers:
          type: array
          items:
            $ref: '#/components/schemas/TaskWithDetails'
          description: "Tasks that are currently blocked"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "Task not found"
        code:
          type: string
          example: "TASK_NOT_FOUND"