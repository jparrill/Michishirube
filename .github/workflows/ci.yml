name: CI/CD Pipeline

# Trigger on push to main and pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  GO_VERSION: '1.24.6'
  
jobs:
  # Test and build job
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Generate code (mocks, docs)
      run: |
        make generate
        make docs
        
    - name: Run linter
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        make lint
        
    - name: Run tests
      run: make test
      
    - name: Run test coverage
      run: make test-coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Build application
      run: make build
      
    - name: Test binary execution
      run: |
        ./build/michishirube --version
        # Test that the binary starts (will exit after a few seconds)
        timeout 10s ./build/michishirube > /dev/null 2>&1 || [ $? -eq 124 ]
        
    - name: Check GoReleaser configuration
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: check

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run security scan (CI mode)
      run: |
        # Install security tools
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run gosec in CI mode (fail on HIGH severity)
        echo "Running gosec security scanner for HIGH severity issues..."
        if gosec -severity high -confidence medium -quiet ./... >/dev/null 2>&1; then
          echo "✅ gosec HIGH severity scan passed"
        else
          echo "❌ gosec found HIGH severity security issues!"
          gosec -severity high -confidence medium ./...
          exit 1
        fi
        
        # Run govulncheck
        echo "Running govulncheck..."
        govulncheck ./...
        
        # Generate SARIF for GitHub Security tab (informational)
        gosec -fmt sarif -out gosec-results.sarif ./...
      
    - name: Upload Gosec scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'

  # Build snapshot on pushes to main
  snapshot:
    name: Create Snapshot
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for changelog
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Generate docs
      run: make docs
      
    - name: Create snapshot release
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --snapshot --clean
        
    - name: Upload snapshot artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snapshot-binaries
        path: dist/
        retention-days: 30